/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var tsqlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[22,23,25,26,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,62,72,75,77,78,79,80,83,85,87,89,98,99,100,113],$V2=[23,25,26,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,62,72,75,77,78,79,80,83,85,87,89,98,99,100,113],$V3=[25,26,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,62,72,75,77,78,79,80,83,85,87,89,98,99,100,113],$V4=[25,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,62,72,75,77,78,79,80,83,85,87,89,98,99,100,113],$V5=[25,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,62,72,75,77,78,79,80,83,85,87,89,98,99,100,113],$V6=[25,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,62,72,75,77,78,79,80,83,85,87,89,98,99,100,113],$V7=[25,30,31,32,35,36,40,42,43,45,46,48,49,51,54,62,72,75,77,78,79,80,83,85,87,89,98,99,100,113],$V8=[25,32,35,36,40,42,43,45,46,48,49,51,54,62,72,75,77,78,79,80,83,85,87,89,98,99,100,113],$V9=[25,35,36,40,42,43,45,46,48,49,51,54,62,72,75,77,78,79,80,83,85,87,89,98,99,100,113],$Va=[1,73],$Vb=[1,32],$Vc=[1,33],$Vd=[1,59],$Ve=[1,71],$Vf=[1,72],$Vg=[1,74],$Vh=[1,75],$Vi=[1,76],$Vj=[1,77],$Vk=[1,78],$Vl=[1,45],$Vm=[1,60],$Vn=[1,66],$Vo=[1,61],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,46],$Vy=[1,47],$Vz=[1,48],$VA=[1,36],$VB=[5,6,56],$VC=[5,6,33,56,172],$VD=[1,86],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[1,87],$VI=[5,6,26,33,39,40,56,67,68,70,73,85,87,101,122,138,139,140,141,143,147,149,152,155,156,158,160,165,167,169,172,179,180,186,190,192,193,195],$VJ=[5,6,24,26,33,39,40,56,67,68,70,73,85,87,101,122,126,127,128,129,130,131,135,138,139,140,141,143,147,149,152,155,156,158,160,165,167,169,172,179,180,186,190,192,193,195],$VK=[1,108],$VL=[1,106],$VM=[1,107],$VN=[1,102],$VO=[1,103],$VP=[1,104],$VQ=[1,105],$VR=[1,109],$VS=[1,110],$VT=[1,111],$VU=[1,112],$VV=[1,113],$VW=[1,114],$VX=[2,116],$VY=[5,6,24,26,33,35,39,40,56,67,68,70,73,75,77,85,87,101,103,104,105,106,107,108,109,110,111,113,117,118,120,121,122,123,124,126,127,128,129,130,131,135,138,139,140,141,143,147,149,152,155,156,158,160,165,167,169,172,179,180,186,190,192,193,195],$VZ=[5,6,24,26,33,35,39,40,56,67,68,70,73,75,77,85,87,101,103,104,105,106,107,108,109,110,111,113,115,117,118,120,121,122,123,124,126,127,128,129,130,131,135,138,139,140,141,143,147,149,152,155,156,158,160,165,167,169,172,179,180,186,190,192,193,195],$V_=[1,115],$V$=[1,116],$V01=[1,118],$V11=[1,125],$V21=[2,54],$V31=[1,128],$V41=[1,150],$V51=[1,146],$V61=[19,25,40,42,43,45,46,48,49,51,54,62,72,75,77,78,79,80,83,85,87,89,98,99,100,133],$V71=[1,187],$V81=[33,56,152],$V91=[5,6,24,25,26,33,35,39,40,42,43,45,46,48,49,51,54,56,59,62,67,68,70,72,73,75,77,78,79,80,83,85,87,89,95,98,99,100,101,103,104,105,106,107,108,109,110,111,113,115,117,118,120,121,122,123,124,126,127,128,129,130,131,135,138,139,140,141,143,147,149,152,155,156,158,160,165,167,169,172,179,180,186,190,192,193,195,205,206,207],$Va1=[33,56],$Vb1=[2,49],$Vc1=[1,196],$Vd1=[1,194],$Ve1=[1,195],$Vf1=[40,63],$Vg1=[5,6,24,26,33,35,39,40,56,67,68,70,73,75,77,85,87,95,101,103,104,105,106,107,108,109,110,111,113,115,117,118,120,121,122,123,124,126,127,128,129,130,131,135,138,139,140,141,143,147,149,152,155,156,158,160,165,167,169,172,179,180,186,190,192,193,195],$Vh1=[2,212],$Vi1=[1,206],$Vj1=[1,207],$Vk1=[5,6,33,56,143,149,152,158,160,165,167,169,195],$Vl1=[1,209],$Vm1=[1,215],$Vn1=[1,214],$Vo1=[1,212],$Vp1=[1,213],$Vq1=[2,189],$Vr1=[1,211],$Vs1=[5,6,26,33,56,85,87,101,143,149,152,158,160,165,167,169,179,180,186,190,192,193,195],$Vt1=[5,6,26,33,39,40,56,67,68,70,73,85,87,101,139,140,141,143,147,149,152,155,156,158,160,165,167,169,172,179,180,186,190,192,193,195],$Vu1=[25,40,42,43,45,46,48,49,51,54,62,72,75,77,78,79,80,83,85,87,89,98,99,100],$Vv1=[5,6,24,26,33,39,40,56,67,68,70,73,85,87,101,103,104,105,106,111,113,117,118,120,121,122,123,124,126,127,128,129,130,131,135,138,139,140,141,143,147,149,152,155,156,158,160,165,167,169,172,179,180,186,190,192,193,195],$Vw1=[5,6,24,26,33,39,40,56,67,68,70,73,75,77,85,87,101,103,104,105,106,111,113,117,118,120,121,122,123,124,126,127,128,129,130,131,135,138,139,140,141,143,147,149,152,155,156,158,160,165,167,169,172,179,180,186,190,192,193,195],$Vx1=[56,152],$Vy1=[5,6,56,149,152,158,160,165,167,169],$Vz1=[1,254],$VA1=[2,194],$VB1=[183,186],$VC1=[5,6,26,33,56,85,87,101,143,149,152,158,160,165,167,169,179,180,186,190,192,193,195,205,206,207],$VD1=[2,214],$VE1=[1,259],$VF1=[2,161],$VG1=[1,271],$VH1=[5,6,56,152,158,160,165,167,169],$VI1=[1,290],$VJ1=[1,298],$VK1=[1,299],$VL1=[1,300],$VM1=[5,6,56,160,165,167,169],$VN1=[5,6,56,152,160,165,167,169],$VO1=[1,325],$VP1=[1,331],$VQ1=[1,332],$VR1=[2,158],$VS1=[1,336],$VT1=[1,337],$VU1=[5,6,33,56,147,152,158,160,165,167,169],$VV1=[67,70,73],$VW1=[2,219],$VX1=[1,351],$VY1=[54,167],$VZ1=[5,6,56,165,167,169],$V_1=[5,6,56,167,169],$V$1=[1,373];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,";":6,"SELECT":7,"distinctOpt":8,"highPriorityOpt":9,"maxStateMentTimeOpt":10,"straightJoinOpt":11,"sqlSmallResultOpt":12,"sqlBigResultOpt":13,"sqlBufferResultOpt":14,"sqlCacheOpt":15,"sqlCalcFoundRowsOpt":16,"selectExprList":17,"selectDataSetOpt":18,"ALL":19,"DISTINCT":20,"DISTINCTROW":21,"HIGH_PRIORITY":22,"MAX_STATEMENT_TIME":23,"=":24,"NUMERIC":25,"STRAIGHT_JOIN":26,"SQL_SMALL_RESULT":27,"SQL_BIG_RESULT":28,"SQL_BUFFER_RESULT":29,"SQL_CACHE":30,"SQL_NO_CACHE":31,"SQL_CALC_FOUND_ROWS":32,",":33,"selectExpr":34,"*":35,"SELECT_EXPR_STAR":36,"expr":37,"selectExprAliasOpt":38,"AS":39,"IDENTIFIER":40,"string":41,"QUOTED_IDENTIFIER":42,"STRING":43,"number":44,"EXPONENT_NUMERIC":45,"HEX_NUMERIC":46,"boolean":47,"TRUE":48,"FALSE":49,"null":50,"NULL":51,"literal":52,"function_call":53,"(":54,"function_call_param_list":55,")":56,"function_call_param":57,"identifier":58,"DOT":59,"delimited_identifier":60,"spaced_identifier":61,"[":62,"]":63,"identifier_list":64,"case_expr_opt":65,"when_then_list":66,"WHEN":67,"THEN":68,"case_when_else":69,"ELSE":70,"case_when":71,"CASE":72,"END":73,"simple_expr_prefix":74,"+":75,"simple_expr":76,"-":77,"~":78,"!":79,"BINARY":80,"cast_type":81,"cast_function":82,"CAST":83,"right_function":84,"RIGHT":85,"left_function":86,"LEFT":87,"next_value_for":88,"NEXT_VALUE_FOR":89,"partition_by_opt":90,"partition_by":91,"PARTITION_BY":92,"expr_list":93,"over":94,"OVER":95,"order_by_opt":96,"over_clause":97,"ROW":98,"EXISTS":99,"{":100,"}":101,"bit_expr":102,"|":103,"&":104,"<<":105,">>":106,"/":107,"DIV":108,"MOD":109,"%":110,"^":111,"not_opt":112,"NOT":113,"escape_opt":114,"ESCAPE":115,"regexp_or_rlike":116,"REGEXP":117,"RLIKE":118,"predicate":119,"IN":120,"BETWEEN":121,"AND":122,"SOUNDS":123,"LIKE":124,"comparison_operator":125,">=":126,">":127,"<=":128,"<":129,"<>":130,"!=":131,"sub_query_data_set_opt":132,"ANY":133,"boolean_primary":134,"IS":135,"boolean_extra":136,"UNKNOWN":137,"&&":138,"||":139,"OR":140,"XOR":141,"where_opt":142,"WHERE":143,"group_by_opt":144,"group_by":145,"roll_up_opt":146,"WITH":147,"ROLLUP":148,"GROUP_BY":149,"group_by_order_by_item_list":150,"order_by":151,"ORDER_BY":152,"group_by_order_by_item":153,"sort_opt":154,"ASC":155,"DESC":156,"having_opt":157,"HAVING":158,"limit":159,"LIMIT":160,"OFFSET":161,"limit_opt":162,"procedure_opt":163,"procedure":164,"PROCEDURE":165,"for_update_lock_in_share_mode_opt":166,"FOR":167,"UPDATE":168,"LOCK":169,"SHARE":170,"MODE":171,"FROM":172,"table_refrences":173,"partitionOpt":174,"escaped_table_reference":175,"table_reference":176,"OJ":177,"join_inner_cross":178,"INNER":179,"CROSS":180,"left_right":181,"out_opt":182,"OUTER":183,"left_right_out_opt":184,"join_table":185,"JOIN":186,"table_factor":187,"join_condition":188,"on_join_condition":189,"NATURAL":190,"join_condition_opt":191,"ON":192,"USING":193,"partition_names":194,"PARTITION":195,"aliasOpt":196,"index_or_key":197,"INDEX":198,"KEY":199,"for_opt":200,"identifier_list_opt":201,"index_hint_list_opt":202,"index_hint_list":203,"index_hint":204,"USE":205,"IGNORE":206,"FORCE":207,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:";",7:"SELECT",19:"ALL",20:"DISTINCT",21:"DISTINCTROW",22:"HIGH_PRIORITY",23:"MAX_STATEMENT_TIME",24:"=",25:"NUMERIC",26:"STRAIGHT_JOIN",27:"SQL_SMALL_RESULT",28:"SQL_BIG_RESULT",29:"SQL_BUFFER_RESULT",30:"SQL_CACHE",31:"SQL_NO_CACHE",32:"SQL_CALC_FOUND_ROWS",33:",",35:"*",36:"SELECT_EXPR_STAR",39:"AS",40:"IDENTIFIER",42:"QUOTED_IDENTIFIER",43:"STRING",45:"EXPONENT_NUMERIC",46:"HEX_NUMERIC",48:"TRUE",49:"FALSE",51:"NULL",54:"(",56:")",59:"DOT",62:"[",63:"]",67:"WHEN",68:"THEN",70:"ELSE",72:"CASE",73:"END",75:"+",77:"-",78:"~",79:"!",80:"BINARY",83:"CAST",85:"RIGHT",87:"LEFT",89:"NEXT_VALUE_FOR",92:"PARTITION_BY",95:"OVER",98:"ROW",99:"EXISTS",100:"{",101:"}",103:"|",104:"&",105:"<<",106:">>",107:"/",108:"DIV",109:"MOD",110:"%",111:"^",113:"NOT",115:"ESCAPE",117:"REGEXP",118:"RLIKE",120:"IN",121:"BETWEEN",122:"AND",123:"SOUNDS",124:"LIKE",126:">=",127:">",128:"<=",129:"<",130:"<>",131:"!=",133:"ANY",135:"IS",137:"UNKNOWN",138:"&&",139:"||",140:"OR",141:"XOR",143:"WHERE",147:"WITH",148:"ROLLUP",149:"GROUP_BY",152:"ORDER_BY",155:"ASC",156:"DESC",158:"HAVING",160:"LIMIT",161:"OFFSET",165:"PROCEDURE",167:"FOR",168:"UPDATE",169:"LOCK",170:"SHARE",171:"MODE",172:"FROM",177:"OJ",179:"INNER",180:"CROSS",183:"OUTER",186:"JOIN",190:"NATURAL",192:"ON",193:"USING",195:"PARTITION",198:"INDEX",199:"KEY",205:"USE",206:"IGNORE",207:"FORCE"},
productions_: [0,[3,2],[3,3],[4,12],[8,1],[8,1],[8,1],[8,0],[9,1],[9,0],[10,3],[10,0],[11,1],[11,0],[12,1],[12,0],[13,1],[13,0],[14,1],[14,0],[15,0],[15,1],[15,1],[16,1],[16,0],[17,3],[17,1],[34,1],[34,1],[34,2],[38,0],[38,2],[38,2],[38,1],[41,1],[41,1],[44,1],[44,1],[44,1],[47,1],[47,1],[50,1],[52,1],[52,1],[52,1],[52,1],[53,4],[55,3],[55,1],[57,0],[57,1],[57,1],[57,2],[57,1],[58,1],[58,3],[58,3],[58,3],[61,1],[61,2],[60,3],[64,1],[64,3],[65,0],[65,1],[66,4],[66,5],[69,0],[69,2],[71,5],[74,2],[74,2],[74,2],[74,2],[74,2],[81,1],[81,4],[82,6],[84,6],[86,6],[88,2],[90,0],[90,1],[91,2],[94,5],[97,2],[97,2],[76,1],[76,1],[76,1],[76,1],[76,1],[76,3],[76,4],[76,3],[76,4],[76,4],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[102,1],[102,3],[102,3],[102,3],[102,3],[102,3],[102,3],[102,3],[102,3],[102,3],[102,3],[102,3],[102,3],[112,0],[112,1],[114,0],[114,2],[116,1],[116,1],[119,1],[119,6],[119,6],[119,6],[119,4],[119,5],[119,4],[125,1],[125,1],[125,1],[125,1],[125,1],[125,1],[125,1],[132,1],[132,1],[134,1],[134,4],[134,3],[134,6],[136,1],[136,1],[37,1],[37,4],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[93,1],[93,3],[142,0],[142,2],[144,0],[144,1],[146,0],[146,2],[145,3],[96,0],[96,1],[151,3],[150,1],[150,3],[153,2],[154,0],[154,1],[154,1],[157,0],[157,2],[159,2],[159,4],[159,4],[162,0],[162,1],[163,0],[163,1],[164,2],[166,0],[166,2],[166,4],[18,0],[18,10],[173,1],[173,3],[175,1],[175,4],[178,0],[178,1],[178,1],[181,1],[181,1],[182,0],[182,1],[184,0],[184,2],[185,4],[185,5],[185,4],[185,6],[185,5],[191,0],[191,1],[189,2],[188,1],[188,4],[176,1],[176,1],[194,1],[194,3],[174,0],[174,4],[196,0],[196,2],[196,1],[197,1],[197,1],[200,0],[200,2],[200,2],[200,2],[201,0],[201,1],[202,0],[202,1],[203,1],[203,3],[204,6],[204,6],[204,6],[187,4],[187,4],[187,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {nodeType: 'Main', value: $$[$0-1]}; 
break;
case 2:
 return {nodeType: 'Main', value: $$[$0-2], hasSemicolon: true}; 
break;
case 3:

        this.$ = {
          type: 'Select',
          distinctOpt: $$[$0-10],
          highPriorityOpt: $$[$0-9],
          maxStateMentTimeOpt: $$[$0-8],
          straightJoinOpt: $$[$0-7],
          sqlSmallResultOpt: $$[$0-6],
          sqlBigResultOpt: $$[$0-5],
          sqlBufferResultOpt: $$[$0-4],
          sqlCacheOpt: $$[$0-3],
          sqlCalcFoundRowsOpt: $$[$0-2],
          selectItems: $$[$0-1],
          from: $$[$0].from,
          partition: $$[$0].partition,
          where: $$[$0].where,
          groupBy: $$[$0].groupBy,
          having: $$[$0].having,
          orderBy: $$[$0].orderBy,
          limit: $$[$0].limit,
          procedure: $$[$0].procedure,
          updateLockMode: $$[$0].updateLockMode
        }
      
break;
case 4: case 5: case 6: case 8: case 10: case 12: case 14: case 16: case 18: case 21: case 22: case 23: case 42: case 43: case 44: case 45: case 50: case 51: case 53: case 58: case 64: case 68: case 75: case 82: case 87: case 88: case 90: case 91: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 117: case 119: case 122: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 142: case 144: case 155: case 157: case 162: case 168: case 169: case 171: case 176: case 178: case 179: case 190: case 191: case 192: case 193: case 195: case 204: case 206: case 208: case 209: case 217: case 218: case 224: case 226:
 this.$ = $$[$0] 
break;
case 7: case 9: case 11: case 13: case 15: case 17: case 19: case 20: case 24: case 49: case 63: case 67: case 81: case 116: case 118: case 154: case 156: case 158: case 161: case 167: case 170: case 175: case 177: case 180: case 189: case 194: case 203: case 212: case 219: case 223: case 225:
 this.$ = null 
break;
case 25:
 $$[$0-2].value.push($$[$0]); 
break;
case 26:
 this.$ = { type: 'SelectExpr', value: [ $$[$0] ] } 
break;
case 27: case 28: case 54:
 this.$ = { type: 'Identifier', value: $$[$0] } 
break;
case 29:
 this.$ = $$[$0-1]; this.$.alias = $$[$0].alias; this.$.hasAs = $$[$0].hasAs; 
break;
case 30: case 214:
 this.$ = {alias: null, hasAs: null} 
break;
case 31:
 this.$ = {alias: $$[$0], hasAs: true} 
break;
case 32:
 this.$ = {alias: $$[$0].value, hasAs: true} 
break;
case 33:
 this.$ = {alias: $$[$0], hasAs: false} 
break;
case 34: case 35:
 this.$ = { type: 'String', value: $$[$0] } 
break;
case 36: case 37: case 38:
 this.$ = { type: 'Number', value: $$[$0] } 
break;
case 39:
 this.$ = { type: 'Boolean', value: 'TRUE' } 
break;
case 40:
 this.$ = { type: 'Boolean', value: 'FALSE' } 
break;
case 41:
 this.$ = { type: 'Null', value: 'null' } 
break;
case 46:
 this.$ = {type: 'FunctionCall', name: $$[$0-3], params: $$[$0-1]} 
break;
case 47:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 48:
 this.$ = [$$[$0]]; 
break;
case 52:
 this.$ = { type: 'FunctionCallParam', distinctOpt: $$[$0-1], value: $$[$0] } 
break;
case 55:
 this.$ = $$[$0-2]; $$[$0-2].value += '.' + $$[$0] 
break;
case 56:
 this.$ = $$[$0]; $$[$0].value = $$[$0-2].value + '.' + $$[$0].value 
break;
case 57:
 this.$ = $$[$0-2]; $$[$0-2].value = $$[$0-2].value + '.' + $$[$0].value 
break;
case 59: case 181:
 this.$ = $$[$0-1] + ' ' + $$[$0] 
break;
case 60:
 this.$ = {type: 'DelimitedIdentifier', value: '[' + $$[$0-1] + ']'} 
break;
case 61:
 this.$ = { type: 'IdentifierList', value: [ $$[$0] ] } 
break;
case 62: case 186:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]); 
break;
case 65:
 this.$ = { type: 'WhenThenList', value: [ { when: $$[$0-2], then: $$[$0] } ] }; 
break;
case 66:
 this.$ = $$[$0-4]; this.$.value.push({ when: $$[$0-2], then: $$[$0] }); 
break;
case 69:
 this.$ = { type: 'CaseWhen', caseExprOpt: $$[$0-3], whenThenList: $$[$0-2], else: $$[$0-1] } 
break;
case 70: case 71: case 72: case 73: case 74:
 this.$ = { type: 'Prefix', prefix: $$[$0-1], value: $$[$0] } 
break;
case 76:
 this.$ = $$[$0-3] + '(' + $$[$0-1] + ')' 
break;
case 77:
 this.$ = { type: 'CastFunction', castIdentifier: $$[$0-3], castType: $$[$0-1] } 
break;
case 78:
 this.$ = { type: 'RightFunction', characterExpression: $$[$0-3], integerExpression: $$[$0-1] } 
break;
case 79:
 this.$ = { type: 'LeftFunction', characterExpression: $$[$0-3], integerExpression: $$[$0-1] } 
break;
case 80:
 this.$ = { type: 'NextValueFor', value: $$[$0] }
break;
case 83:
 this.$ = { type: 'PartitionBy', value: $$[$0] } 
break;
case 84:
 this.$ = { type: 'OverClause', partitionBy: $$[$0-2], orderBy: $$[$0-1] }
break;
case 85: case 86:
 this.$ = $$[$0]; $$[$0].left = $$[$0-1] 
break;
case 89:
this.$ = $$[$0] 
break;
case 92:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-1] } 
break;
case 93:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-2], hasRow: true } 
break;
case 94:
 this.$ = { type: 'SubQuery', value: $$[$0-1] } 
break;
case 95:
 this.$ = { type: 'SubQuery', value: $$[$0-1], hasExists: true } 
break;
case 96:
 this.$ = { type: 'IdentifierExpr', identifier: $$[$0-2], value: $$[$0-1] } 
break;
case 104:
 this.$ = { type: 'BitExpression', operator: '|', left: $$[$0-2], right: $$[$0] } 
break;
case 105:
 this.$ = { type: 'BitExpression', operator: '&', left: $$[$0-2], right: $$[$0] } 
break;
case 106:
 this.$ = { type: 'BitExpression', operator: '<<', left: $$[$0-2], right: $$[$0] } 
break;
case 107:
 this.$ = { type: 'BitExpression', operator: '>>', left: $$[$0-2], right: $$[$0] } 
break;
case 108:
 this.$ = { type: 'BitExpression', operator: '+', left: $$[$0-2], right: $$[$0] } 
break;
case 109:
 this.$ = { type: 'BitExpression', operator: '-', left: $$[$0-2], right: $$[$0] } 
break;
case 110:
 this.$ = { type: 'BitExpression', operator: '*', left: $$[$0-2], right: $$[$0] } 
break;
case 111:
 this.$ = { type: 'BitExpression', operator: '/', left: $$[$0-2], right: $$[$0] } 
break;
case 112:
 this.$ = { type: 'BitExpression', operator: 'DIV', left: $$[$0-2], right: $$[$0] } 
break;
case 113:
 this.$ = { type: 'BitExpression', operator: 'MOD', left: $$[$0-2], right: $$[$0] } 
break;
case 114:
 this.$ = { type: 'BitExpression', operator: '%', left: $$[$0-2], right: $$[$0] } 
break;
case 115:
 this.$ = { type: 'BitExpression', operator: '^', left: $$[$0-2], right: $$[$0] } 
break;
case 120:
 this.$ = 'RegexpPredicate' 
break;
case 121:
 this.$ = 'RLikePredicate' 
break;
case 123:
 this.$ = { type: 'InSubQueryPredicate', hasNot: $$[$0-4], left: $$[$0-5] ,right: $$[$0-1] } 
break;
case 124:
 this.$ = { type: 'InExpressionListPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: $$[$0-1] } 
break;
case 125:
 this.$ = { type: 'BetweenPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: { left: $$[$0-2], right: $$[$0] } } 
break;
case 126:
 this.$ = { type: 'SoundsLikePredicate', hasNot: false, left: $$[$0-3], right: $$[$0] } 
break;
case 127:
 this.$ = { type: 'LikePredicate', hasNot: $$[$0-3], left: $$[$0-4], right: $$[$0-1], escape: $$[$0] } 
break;
case 128:
 this.$ = { type: $$[$0-1], hasNot: $$[$0-2], left: $$[$0-3], right: $$[$0] } 
break;
case 139:
 this.$ = { type: 'IsNullBooleanPrimary', hasNot: $$[$0-1] , value: $$[$0-3] } 
break;
case 140:
 this.$ = { type: 'ComparisonBooleanPrimary', left: $$[$0-2], operator: $$[$0-1], right: $$[$0] } 
break;
case 141:
 this.$ = { type: 'ComparisonSubQueryBooleanPrimary', operator: $$[$0-4], subQueryOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1] } 
break;
case 143:
 this.$ = { type: 'BooleanExtra', value: $$[$0] } 
break;
case 145:
 this.$ = { type: 'IsExpression', hasNot: $$[$0-1], left: $$[$0-3], right: $$[$0] } 
break;
case 146:
 this.$ = { type: 'NotExpression', value: $$[$0] } 
break;
case 147: case 150:
 this.$ = { type: 'AndExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 148: case 149:
 this.$ = { type: 'OrExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 151:
 this.$ = { type: 'XORExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 152:
 this.$ = { type: 'ExpressionList', value: [ $$[$0] ] } 
break;
case 153: case 228:
 this.$ = $$[$0-2]; this.$.value.push($$[$0]); 
break;
case 159:
 this.$ = true 
break;
case 160:
 this.$ = { type: 'GroupBy', value: $$[$0-1], rollUp: $$[$0] } 
break;
case 163:
 this.$ = { type: 'OrderBy', value: $$[$0-1], rollUp: $$[$0] } 
break;
case 164: case 210:
 this.$ = [ $$[$0] ] 
break;
case 165:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 166:
 this.$ = { type: 'GroupByOrderByItem', value: $$[$0-1], sortOpt: $$[$0] } 
break;
case 172:
 this.$ = { type: 'Limit', value: [ $$[$0] ] } 
break;
case 173:
 this.$ = { type: 'Limit', value: [ $$[$0-2], $$[$0] ] } 
break;
case 174:
 this.$ = { type: 'Limit', value: [ $$[$0], $$[$0-2] ], offsetMode: true } 
break;
case 182:
 this.$ = $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0] 
break;
case 183:
 this.$ = {} 
break;
case 184:
 this.$ = { from: $$[$0-8], partition: $$[$0-7], where: $$[$0-6], groupBy: $$[$0-5], having: $$[$0-4], orderBy: $$[$0-3], limit: $$[$0-2], procedure: $$[$0-1], updateLockMode: $$[$0] } 
break;
case 185:
 this.$ = { type: 'TableRefrences', value: [ $$[$0] ] } 
break;
case 187:
 this.$ = { type: 'TableRefrence', value: $$[$0] } 
break;
case 188:
 this.$ = { type: 'TableRefrence', hasOj: true, value: $$[$0-1] } 
break;
case 196:
 this.$ = { leftRight: null, outOpt: null } 
break;
case 197:
 this.$ = { leftRight: $$[$0-1], outOpt: $$[$0] } 
break;
case 198:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-2], left: $$[$0-3], right: $$[$0], condition: null } 
break;
case 199:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-3], left: $$[$0-4], right: $$[$0-1], condition: $$[$0] } 
break;
case 200:
 this.$ = { type: 'StraightJoinTable', left: $$[$0-3], right: $$[$0-1], condition: $$[$0] } 
break;
case 201:
 this.$ = { type: 'LeftRightJoinTable', leftRight: $$[$0-4], outOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1], condition: $$[$0] } 
break;
case 202:
 this.$ = { type: 'NaturalJoinTable', leftRight: $$[$0-2].leftRight, outOpt: $$[$0-2].outOpt, left: $$[$0-4], right: $$[$0] } 
break;
case 205:
 this.$ = { type: 'OnJoinCondition', value: $$[$0] } 
break;
case 207:
 this.$ = { type: 'UsingJoinCondition', value: $$[$0-1] } 
break;
case 211:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]) 
break;
case 213:
 this.$ = { type: 'Partitions', value: $$[$0-1] } 
break;
case 215:
 this.$ = { hasAs: true, alias: $$[$0] } 
break;
case 216:
 this.$ = { hasAs: false, alias: $$[$0] } 
break;
case 220: case 221: case 222:
 this.$ = { type: 'ForOptIndexHint', value: $$[$0] } 
break;
case 227:
 this.$ = { type: 'IndexHintList', value: [ $$[$0] ] } 
break;
case 229:
 this.$ = { type: 'UseIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 230:
 this.$ = { type: 'IgnoreIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 231:
 this.$ = { type: 'ForceIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 232:
 this.$ = { type: 'TableFactor', value: $$[$0-3], partition: $$[$0-2], alias: $$[$0-1].alias, hasAs: $$[$0-1].hasAs, indexHintOpt: $$[$0] } 
break;
case 233:
 this.$ = { type: 'SubQuery', value: $$[$0-2], alias: $$[$0].alias, hasAs: $$[$0].hasAs } 
break;
case 234:
 this.$ = $$[$0-1]; this.$.hasParentheses = true 
break;
}
},
table: [{3:1,4:2,7:$V0},{1:[3]},{5:[1,4],6:[1,5]},o($V1,[2,7],{8:6,19:[1,7],20:[1,8],21:[1,9]}),{1:[2,1]},{5:[1,10]},o($V2,[2,9],{9:11,22:[1,12]}),o($V1,[2,4]),o($V1,[2,5]),o($V1,[2,6]),{1:[2,2]},o($V3,[2,11],{10:13,23:[1,14]}),o($V2,[2,8]),o($V4,[2,13],{11:15,26:[1,16]}),{24:[1,17]},o($V5,[2,15],{12:18,27:[1,19]}),o($V4,[2,12]),{25:[1,20]},o($V6,[2,17],{13:21,28:[1,22]}),o($V5,[2,14]),o($V3,[2,10]),o($V7,[2,19],{14:23,29:[1,24]}),o($V6,[2,16]),o($V8,[2,20],{15:25,30:[1,26],31:[1,27]}),o($V7,[2,18]),o($V9,[2,24],{16:28,32:[1,29]}),o($V8,[2,21]),o($V8,[2,22]),{17:30,25:$Va,34:31,35:$Vb,36:$Vc,37:34,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},o($V9,[2,23]),o($VB,[2,183],{18:79,33:[1,80],172:[1,81]}),o($VC,[2,26]),o($VC,[2,27]),o($VC,[2,28]),o($VC,[2,30],{38:82,39:[1,88],40:[1,89],122:$VD,138:$VE,139:$VF,140:$VG,141:$VH}),o($VI,[2,144],{125:91,24:[1,92],126:[1,93],127:[1,94],128:[1,95],129:[1,96],130:[1,97],131:[1,98],135:[1,90]}),{25:$Va,37:99,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},o($VJ,[2,138]),o($VJ,[2,122],{112:100,35:$VK,75:$VL,77:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV,113:$VW,117:$VX,118:$VX,120:$VX,121:$VX,124:$VX,123:[1,101]}),o($VY,[2,103]),o($VZ,[2,87]),o($VZ,[2,88],{59:$V_}),o($VZ,[2,89],{59:$V$}),o($VZ,[2,90],{94:117,95:$V01}),o($VZ,[2,91]),{4:120,7:$V0,25:$Va,37:121,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,93:119,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{54:[1,122]},{54:[1,123]},{40:$V11,58:124,60:126,62:$Vm},o($VZ,[2,97]),o($VZ,[2,98]),o($VZ,[2,99]),o($VZ,[2,100]),o($VZ,[2,101]),o($VZ,[2,102],{94:127,95:$V01}),o($VZ,[2,42]),o($VZ,[2,43]),o($VZ,[2,44]),o($VZ,[2,45]),o([5,6,24,26,33,35,39,40,56,59,67,68,70,73,75,77,85,87,101,103,104,105,106,107,108,109,110,111,113,115,117,118,120,121,122,123,124,126,127,128,129,130,131,135,138,139,140,141,143,147,149,152,155,156,158,160,165,167,169,172,179,180,186,190,192,193,195],$V21,{54:$V31}),{40:[1,130],61:129},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:131,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:132,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:133,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:134,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:135,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz},{25:$Va,37:137,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,65:136,67:[2,63],71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{54:[1,138]},{54:[1,139]},{54:[1,140]},{40:$V11,58:141,60:126,62:$Vm},o($VZ,[2,34]),o($VZ,[2,35]),o($VZ,[2,36]),o($VZ,[2,37]),o($VZ,[2,38]),o($VZ,[2,39]),o($VZ,[2,40]),o($VZ,[2,41]),o($VB,[2,3]),{25:$Va,34:142,35:$Vb,36:$Vc,37:34,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{40:$V11,54:$V41,58:149,60:126,62:$Vm,100:$V51,173:143,175:144,176:145,185:148,187:147},o($VC,[2,29]),{25:$Va,37:151,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{25:$Va,37:152,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{25:$Va,37:153,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{25:$Va,37:154,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{25:$Va,37:155,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{40:[1,156],41:157,42:$Ve,43:$Vf},o($VC,[2,33]),o([48,49,51,137],$VX,{112:158,113:$VW}),{19:[1,161],25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,119:159,132:160,133:[1,162]},o($V61,[2,129]),o($V61,[2,130]),o($V61,[2,131]),o($V61,[2,132]),o($V61,[2,133]),o($V61,[2,134]),o($V61,[2,135]),o($VI,[2,146]),{116:166,117:[1,167],118:[1,168],120:[1,163],121:[1,164],124:[1,165]},{124:[1,169]},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:170},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:171},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:172},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:173},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:174},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:175},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:176},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:177},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:178},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:179},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:180},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:181},o([48,49,51,117,118,120,121,124,137],[2,117]),{40:[1,182],60:183,62:$Vm},{60:184,62:$Vm},o($VZ,[2,85]),{54:[1,185]},{33:$V71,56:[1,186]},{56:[1,188]},o($V81,[2,152],{122:$VD,138:$VE,139:$VF,140:$VG,141:$VH}),{25:$Va,37:121,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,93:189,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{4:190,7:$V0},{25:$Va,37:191,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,59:$V_,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},o($V91,$V21),{59:$V$},o($VZ,[2,86]),o($Va1,$Vb1,{134:35,119:37,102:38,76:39,52:40,58:41,60:42,53:43,74:44,71:49,82:50,84:51,86:52,97:53,88:54,41:55,44:56,47:57,50:58,55:192,57:193,37:197,20:$Vc1,25:$Va,35:$Vd1,36:$Ve1,40:$Vd,42:$Ve,43:$Vf,45:$Vg,46:$Vh,48:$Vi,49:$Vj,51:$Vk,54:$Vl,62:$Vm,72:$Vn,75:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,83:$Vt,85:$Vu,87:$Vv,89:$Vw,98:$Vx,99:$Vy,100:$Vz,113:$VA}),{40:[1,199],63:[1,198]},o($Vf1,[2,58]),o($VZ,[2,70]),o($VZ,[2,71]),o($VZ,[2,72]),o($VZ,[2,73]),o($VZ,[2,74]),{66:200,67:[1,201]},{67:[2,64],122:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{25:$Va,37:202,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{25:$Va,37:203,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{25:$Va,37:204,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},o($Vg1,[2,80],{59:$V_}),o($VC,[2,25]),o([5,6,56,143,149,152,158,160,165,167,169],$Vh1,{174:205,33:$Vi1,195:$Vj1}),o($Vk1,[2,185]),o($Vk1,[2,187],{178:208,181:210,26:$Vl1,85:$Vm1,87:$Vn1,179:$Vo1,180:$Vp1,186:$Vq1,190:$Vr1}),{177:[1,216]},o($Vs1,[2,208]),o($Vs1,[2,209]),o([5,6,26,33,39,40,56,62,85,87,101,143,149,152,158,160,165,167,169,179,180,186,190,192,193,205,206,207],$Vh1,{174:217,59:$V_,195:$Vj1}),{4:218,7:$V0,40:$V11,54:$V41,58:149,60:126,62:$Vm,100:$V51,173:219,175:144,176:145,185:148,187:147},o($VI,[2,147]),o($Vt1,[2,148],{122:$VD,138:$VE}),o($Vt1,[2,149],{122:$VD,138:$VE}),o($VI,[2,150]),o($Vt1,[2,151],{122:$VD,138:$VE}),o($VC,[2,31]),o($VC,[2,32]),{47:222,48:$Vi,49:$Vj,51:[1,221],136:220,137:[1,223]},o($VJ,[2,140]),{54:[1,224]},{54:[2,136]},{54:[2,137]},{54:[1,225]},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:226},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:227,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:228},o($Vu1,[2,120]),o($Vu1,[2,121]),{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:229},o([5,6,24,26,33,39,40,56,67,68,70,73,85,87,101,103,113,117,118,120,121,122,123,124,126,127,128,129,130,131,135,138,139,140,141,143,147,149,152,155,156,158,160,165,167,169,172,179,180,186,190,192,193,195],[2,104],{35:$VK,75:$VL,77:$VM,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV}),o([5,6,24,26,33,39,40,56,67,68,70,73,85,87,101,103,104,111,113,117,118,120,121,122,123,124,126,127,128,129,130,131,135,138,139,140,141,143,147,149,152,155,156,158,160,165,167,169,172,179,180,186,190,192,193,195],[2,105],{35:$VK,75:$VL,77:$VM,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU}),o($Vv1,[2,106],{35:$VK,75:$VL,77:$VM,107:$VR,108:$VS,109:$VT,110:$VU}),o($Vv1,[2,107],{35:$VK,75:$VL,77:$VM,107:$VR,108:$VS,109:$VT,110:$VU}),o($Vw1,[2,108],{35:$VK,107:$VR,108:$VS,109:$VT,110:$VU}),o($Vw1,[2,109],{35:$VK,107:$VR,108:$VS,109:$VT,110:$VU}),o($VY,[2,110]),o($VY,[2,111]),o($VY,[2,112]),o($VY,[2,113]),o($VY,[2,114]),o([5,6,24,26,33,39,40,56,67,68,70,73,85,87,101,103,111,113,117,118,120,121,122,123,124,126,127,128,129,130,131,135,138,139,140,141,143,147,149,152,155,156,158,160,165,167,169,172,179,180,186,190,192,193,195],[2,115],{35:$VK,75:$VL,77:$VM,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU}),o($V91,[2,55]),o($V91,[2,56]),o($V91,[2,57]),o($Vx1,[2,81],{90:230,91:231,92:[1,232]}),o($VZ,[2,92]),{25:$Va,37:233,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},o($VZ,[2,94]),{33:$V71,56:[1,234]},{56:[1,235]},{101:[1,236],122:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{33:[1,238],56:[1,237]},o($Va1,[2,48]),o($Va1,[2,50]),o($Va1,[2,51]),{25:$Va,37:239,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},o($Va1,[2,53],{122:$VD,138:$VE,139:$VF,140:$VG,141:$VH}),o($V91,[2,60]),o($Vf1,[2,59]),{67:[1,241],69:240,70:[1,242],73:[2,67]},{25:$Va,37:243,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{39:[1,244],122:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{33:[1,245],122:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{33:[1,246],122:$VD,138:$VE,139:$VF,140:$VG,141:$VH},o($Vy1,[2,154],{142:247,143:[1,248]}),{40:$V11,54:$V41,58:149,60:126,62:$Vm,100:$V51,175:249,176:145,185:148,187:147},{54:[1,250]},{186:[1,251]},{40:$V11,54:$V41,58:149,60:126,62:$Vm,187:252},{182:253,183:$Vz1,186:$VA1},{85:$Vm1,87:$Vn1,181:256,184:255,186:[2,196]},{186:[2,190]},{186:[2,191]},o($VB1,[2,192]),o($VB1,[2,193]),{40:$V11,54:$V41,58:149,60:126,62:$Vm,176:257,185:148,187:147},o($VC1,$VD1,{60:126,196:258,58:260,39:$VE1,40:$V11,62:$Vm}),{56:[1,261]},{33:$Vi1,56:[1,262]},o($VI,[2,145]),o($VJ,[2,139]),o($VI,[2,142]),o($VI,[2,143]),{4:263,7:$V0},{4:264,7:$V0,25:$Va,37:121,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,93:265,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{35:$VK,75:$VL,77:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV,122:[1,266]},o($VJ,[2,118],{114:267,115:[1,268]}),o($VJ,[2,128],{35:$VK,75:$VL,77:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV}),o($VJ,[2,126],{35:$VK,75:$VL,77:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV}),{56:$VF1,96:269,151:270,152:$VG1},o($Vx1,[2,82]),{25:$Va,37:121,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,93:272,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},o($V81,[2,153],{122:$VD,138:$VE,139:$VF,140:$VG,141:$VH}),o($VZ,[2,93]),o($VZ,[2,95]),o($VZ,[2,96]),o($Vg1,[2,46]),o($Va1,$Vb1,{134:35,119:37,102:38,76:39,52:40,58:41,60:42,53:43,74:44,71:49,82:50,84:51,86:52,97:53,88:54,41:55,44:56,47:57,50:58,37:197,57:273,20:$Vc1,25:$Va,35:$Vd1,36:$Ve1,40:$Vd,42:$Ve,43:$Vf,45:$Vg,46:$Vh,48:$Vi,49:$Vj,51:$Vk,54:$Vl,62:$Vm,72:$Vn,75:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,83:$Vt,85:$Vu,87:$Vv,89:$Vw,98:$Vx,99:$Vy,100:$Vz,113:$VA}),o($Va1,[2,52],{122:$VD,138:$VE,139:$VF,140:$VG,141:$VH}),{73:[1,274]},{25:$Va,37:275,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{25:$Va,37:276,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{68:[1,277],122:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{40:[1,279],81:278},{25:$Va,37:280,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{25:$Va,37:281,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},o($VH1,[2,156],{144:282,145:283,149:[1,284]}),{25:$Va,37:285,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},o($Vk1,[2,186]),{40:$V11,58:287,60:126,62:$Vm,194:286},{40:$V11,54:$V41,58:149,60:126,62:$Vm,187:288},{189:289,192:$VI1},{186:[1,291]},{186:[2,195]},{186:[1,292]},{182:293,183:$Vz1,186:$VA1},{26:$Vl1,85:$Vm1,87:$Vn1,101:[1,294],178:208,179:$Vo1,180:$Vp1,181:210,186:$Vq1,190:$Vr1},o($Vs1,[2,225],{202:295,203:296,204:297,205:$VJ1,206:$VK1,207:$VL1}),{40:$V11,58:301,60:126,62:$Vm},o($VC1,[2,216],{59:$V_}),o($Vs1,$VD1,{60:126,58:260,196:302,39:$VE1,40:$V11,62:$Vm}),o($Vs1,[2,234]),{56:[1,303]},{56:[1,304]},{33:$V71,56:[1,305]},{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,119:306},o($VJ,[2,127]),{25:$Va,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:307,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz},{56:[1,308]},o($VM1,[2,162]),{25:$Va,37:311,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35,150:309,153:310},o($Vx1,[2,83],{33:$V71}),o($Va1,[2,47]),o($VZ,[2,69]),{68:[1,312],122:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{73:[2,68],122:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{25:$Va,37:313,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{56:[1,314]},{54:[1,315],56:[2,75]},{56:[1,316],122:$VD,138:$VE,139:$VF,140:$VG,141:$VH},{56:[1,317],122:$VD,138:$VE,139:$VF,140:$VG,141:$VH},o($VN1,[2,170],{157:318,158:[1,319]}),o($VH1,[2,157]),{25:$Va,37:311,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35,150:320,153:310},o($Vy1,[2,155],{122:$VD,138:$VE,139:$VF,140:$VG,141:$VH}),{33:[1,322],56:[1,321]},o($Va1,[2,210],{59:$V_}),o([5,6,26,33,56,85,87,101,143,149,152,158,160,165,167,169,179,180,186,190,195],[2,198],{188:323,189:324,192:$VI1,193:$VO1}),o($Vs1,[2,200]),{25:$Va,37:326,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},{40:$V11,54:$V41,58:149,60:126,62:$Vm,176:327,185:148,187:147},{40:$V11,54:$V41,58:149,60:126,62:$Vm,187:328},{186:[2,197]},o($Vk1,[2,188]),o($Vs1,[2,232]),o($Vs1,[2,226]),o($Vs1,[2,227]),{197:330,198:$VP1,199:$VQ1},{197:333,198:$VP1,199:$VQ1},{197:334,198:$VP1,199:$VQ1},o($VC1,[2,215],{59:$V_}),o($Vs1,[2,233]),o($VJ,[2,141]),o($VJ,[2,123]),o($VJ,[2,124]),o($VJ,[2,125]),o($VJ,[2,119]),o($VZ,[2,84]),o($VM1,$VR1,{146:335,33:$VS1,147:$VT1}),o($VU1,[2,164]),o($VU1,[2,167],{154:338,122:$VD,138:$VE,139:$VF,140:$VG,141:$VH,155:[1,339],156:[1,340]}),{25:$Va,37:341,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},o($VV1,[2,65],{122:$VD,138:$VE,139:$VF,140:$VG,141:$VH}),o($VZ,[2,77]),{25:[1,342]},o($VZ,[2,78]),o($VZ,[2,79]),o($VM1,$VF1,{151:270,96:343,152:$VG1}),{25:$Va,37:344,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35},o($VH1,$VR1,{146:345,33:$VS1,147:$VT1}),o([5,6,26,33,39,40,56,62,85,87,101,143,149,152,158,160,165,167,169,179,180,186,190,192,193,195,205,206,207],[2,213]),{40:$V11,58:346,60:126,62:$Vm},o($Vs1,[2,199]),o($Vs1,[2,206]),{54:[1,347]},o($Vs1,[2,205],{122:$VD,138:$VE,139:$VF,140:$VG,141:$VH}),{26:$Vl1,85:$Vm1,87:$Vn1,178:208,179:$Vo1,180:$Vp1,181:210,186:$Vq1,188:348,189:324,190:$Vr1,192:$VI1,193:$VO1},o($Vs1,[2,202]),{204:349,205:$VJ1,206:$VK1,207:$VL1},{54:$VW1,167:$VX1,200:350},o($VY1,[2,217]),o($VY1,[2,218]),{54:$VW1,167:$VX1,200:352},{54:$VW1,167:$VX1,200:353},o($VM1,[2,163]),{25:$Va,37:311,40:$Vd,41:55,42:$Ve,43:$Vf,44:56,45:$Vg,46:$Vh,47:57,48:$Vi,49:$Vj,50:58,51:$Vk,52:40,53:43,54:$Vl,58:41,60:42,62:$Vm,71:49,72:$Vn,74:44,75:$Vo,76:39,77:$Vp,78:$Vq,79:$Vr,80:$Vs,82:50,83:$Vt,84:51,85:$Vu,86:52,87:$Vv,88:54,89:$Vw,97:53,98:$Vx,99:$Vy,100:$Vz,102:38,113:$VA,119:37,134:35,153:354},{148:[1,355]},o($VU1,[2,166]),o($VU1,[2,168]),o($VU1,[2,169]),o($VV1,[2,66],{122:$VD,138:$VE,139:$VF,140:$VG,141:$VH}),{56:[1,356]},o($VZ1,[2,175],{162:357,159:358,160:[1,359]}),o($VN1,[2,171],{122:$VD,138:$VE,139:$VF,140:$VG,141:$VH}),o($VH1,[2,160]),o($Va1,[2,211],{59:$V_}),{40:$V11,58:361,60:126,62:$Vm,64:360},o($Vs1,[2,201]),o($Vs1,[2,228]),{54:[1,362]},{149:[1,365],152:[1,364],186:[1,363]},{54:[1,366]},{54:[1,367]},o($VU1,[2,165]),o($VH1,[2,159]),{56:[2,76]},o($V_1,[2,177],{163:368,164:369,165:[1,370]}),o($VZ1,[2,176]),{25:[1,371]},{33:$V$1,56:[1,372]},o($Va1,[2,61],{59:$V_}),{40:$V11,56:[2,223],58:361,60:126,62:$Vm,64:375,201:374},{54:[2,220]},{54:[2,221]},{54:[2,222]},{40:$V11,58:361,60:126,62:$Vm,64:376},{40:$V11,58:361,60:126,62:$Vm,64:377},o($VB,[2,180],{166:378,167:[1,379],169:[1,380]}),o($V_1,[2,178]),{40:[1,382],53:381},o($VZ1,[2,172],{33:[1,383],161:[1,384]}),o($Vs1,[2,207]),{40:$V11,58:385,60:126,62:$Vm},{56:[1,386]},{33:$V$1,56:[2,224]},{33:$V$1,56:[1,387]},{33:$V$1,56:[1,388]},o($VB,[2,184]),{168:[1,389]},{120:[1,390]},o($V_1,[2,179]),{54:$V31},{25:[1,391]},{25:[1,392]},o($Va1,[2,62],{59:$V_}),o($Vs1,[2,229]),o($Vs1,[2,230]),o($Vs1,[2,231]),o($VB,[2,181]),{170:[1,393]},o($VZ1,[2,173]),o($VZ1,[2,174]),{171:[1,394]},o($VB,[2,182])],
defaultActions: {4:[2,1],10:[2,2],161:[2,136],162:[2,137],212:[2,190],213:[2,191],254:[2,195],293:[2,197],356:[2,76],363:[2,220],364:[2,221],365:[2,222]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip sql comments */
break;
case 2:/* skip sql comments */
break;
case 3:/* skip whitespace */
break;
case 4:return 40
break;
case 5:return 40
break;
case 6:return 40
break;
case 7:return 7
break;
case 8:return 19
break;
case 9:return 133
break;
case 10:return 20
break;
case 11:return 21
break;
case 12:return 22
break;
case 13:return 23
break;
case 14:return 26
break;
case 15:return 27
break;
case 16:return 28
break;
case 17:return 29
break;
case 18:return 30
break;
case 19:return 31
break;
case 20:return 32
break;
case 21:return 36
break;
case 22:return 39
break;
case 23:return 48
break;
case 24:return 49
break;
case 25:return 51
break;
case 26:return 'COLLATE'
break;
case 27:return 80
break;
case 28:return 98
break;
case 29:return 99
break;
case 30:return 72
break;
case 31:return 67
break;
case 32:return 68
break;
case 33:return 70
break;
case 34:return 73
break;
case 35:return 108
break;
case 36:return 109
break;
case 37:return 113
break;
case 38:return 121
break;
case 39:return 120
break;
case 40:return 123
break;
case 41:return 124
break;
case 42:return 118
break;
case 43:return 115
break;
case 44:return 117
break;
case 45:return 135
break;
case 46:return 137
break;
case 47:return 122
break;
case 48:return 140
break;
case 49:return 141
break;
case 50:return 172
break;
case 51:return 92
break;
case 52:return 195
break;
case 53:return 205
break;
case 54:return 198
break;
case 55:return 199
break;
case 56:return 167
break;
case 57:return 186
break;
case 58:return 152
break;
case 59:return 149
break;
case 60:return 206
break;
case 61:return 207
break;
case 62:return 179
break;
case 63:return 180
break;
case 64:return 192
break;
case 65:return 193
break;
case 66:return 87
break;
case 67:return 85
break;
case 68:return 183
break;
case 69:return 190
break;
case 70:return 143
break;
case 71:return 155
break;
case 72:return 156
break;
case 73:return 147
break;
case 74:return 148
break;
case 75:return 158
break;
case 76:return 161
break;
case 77:return 165
break;
case 78:return 168
break;
case 79:return 169
break;
case 80:return 170
break;
case 81:return 171
break;
case 82:return 177
break;
case 83:return 160
break;
case 84:return 83
break;
case 85:return 95
break;
case 86:return 89
break;
case 87:return 33
break;
case 88:return 24
break;
case 89:return 54
break;
case 90:return 56
break;
case 91:return 78
break;
case 92:return 131
break;
case 93:return 79
break;
case 94:return 103
break;
case 95:return 104
break;
case 96:return 75
break;
case 97:return 77
break;
case 98:return 35
break;
case 99:return 107
break;
case 100:return 110
break;
case 101:return 111
break;
case 102:return 106
break;
case 103:return 126
break;
case 104:return 127
break;
case 105:return 105
break;
case 106:return '<=>'
break;
case 107:return 128
break;
case 108:return 130
break;
case 109:return 129
break;
case 110:return 100
break;
case 111:return 101
break;
case 112:return 62
break;
case 113:return 63
break;
case 114:return 6
break;
case 115:return 43
break;
case 116:return 43
break;
case 117:return 46
break;
case 118:return 25
break;
case 119:return 45
break;
case 120:return 40
break;
case 121:return 59
break;
case 122:return 42
break;
case 123:return 5
break;
case 124:return 'INVALID'
break;
}
},
rules: [/^(?:[\/][*](.|\n)*?[*][\/])/i,/^(?:[-][-]\s.*\n)/i,/^(?:[#]\s.*\n)/i,/^(?:\s+)/i,/^(?:[`][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*[`])/i,/^(?:[\w]+[\u4e00-\u9fa5]+[0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:[\u4e00-\u9fa5][0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:SELECT\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:DISTINCT\b)/i,/^(?:DISTINCTROW\b)/i,/^(?:HIGH_PRIORITY\b)/i,/^(?:MAX_STATEMENT_TIME\b)/i,/^(?:STRAIGHT_JOIN\b)/i,/^(?:SQL_SMALL_RESULT\b)/i,/^(?:SQL_BIG_RESULT\b)/i,/^(?:SQL_BUFFER_RESULT\b)/i,/^(?:SQL_CACHE\b)/i,/^(?:SQL_NO_CACHE\b)/i,/^(?:SQL_CALC_FOUND_ROWS\b)/i,/^(?:([a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*\.){1,2}\*)/i,/^(?:AS\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:COLLATE\b)/i,/^(?:BINARY\b)/i,/^(?:ROW\b)/i,/^(?:EXISTS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:DIV\b)/i,/^(?:MOD\b)/i,/^(?:NOT\b)/i,/^(?:BETWEEN\b)/i,/^(?:IN\b)/i,/^(?:SOUNDS\b)/i,/^(?:LIKE\b)/i,/^(?:RLIKE\b)/i,/^(?:ESCAPE\b)/i,/^(?:REGEXP\b)/i,/^(?:IS\b)/i,/^(?:UNKNOWN\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:XOR\b)/i,/^(?:FROM\b)/i,/^(?:PARTITION\s+BY\b)/i,/^(?:PARTITION\b)/i,/^(?:USE\b)/i,/^(?:INDEX\b)/i,/^(?:KEY\b)/i,/^(?:FOR\b)/i,/^(?:JOIN\b)/i,/^(?:ORDER\s+BY\b)/i,/^(?:GROUP\s+BY\b)/i,/^(?:IGNORE\b)/i,/^(?:FORCE\b)/i,/^(?:INNER\b)/i,/^(?:CROSS\b)/i,/^(?:ON\b)/i,/^(?:USING\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:OUTER\b)/i,/^(?:NATURAL\b)/i,/^(?:WHERE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:WITH\b)/i,/^(?:ROLLUP\b)/i,/^(?:HAVING\b)/i,/^(?:OFFSET\b)/i,/^(?:PROCEDURE\b)/i,/^(?:UPDATE\b)/i,/^(?:LOCK\b)/i,/^(?:SHARE\b)/i,/^(?:MODE\b)/i,/^(?:OJ\b)/i,/^(?:LIMIT\b)/i,/^(?:CAST\b)/i,/^(?:OVER\b)/i,/^(?:NEXT\s+VALUE\s+FOR\b)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:~)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|)/i,/^(?:&)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<<)/i,/^(?:<=>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:[0][x][0-9a-fA-F]+)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?[eE][-][0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*)/i,/^(?:\.)/i,/^(?:['"][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*["'])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();if (!tsqlParser) {
  tsqlParser = {};
}

function Sql() {
  this.buffer = '';
}

tsqlParser.stringify = function (ast) {
  var sql = new Sql();
  sql.travelMain(ast);
  return sql.buffer;
}

Sql.prototype.travel = function (ast) {
  if (!ast) return;

  if (typeof ast === 'string') {
    return this.append(ast);
  }

  var processor = this['travel' + ast.type];
  processor.call(this, ast);
}

var noSuffixFlag = false;
Sql.prototype.appendKeyword = function(keyword, noPrefix, noSuffix) {
  if (noSuffixFlag) {
    noPrefix = true;
    noSuffixFlag = false;
  }
  if (noPrefix) {
    this.buffer += keyword.toUpperCase();
  } else {
    this.buffer += ' ' + keyword.toUpperCase();
  }

  if (noSuffix) {
    noSuffixFlag = true;
  }
}
Sql.prototype.append = function(word, noPrefix, noSuffix) {
  if (noSuffixFlag) {
    noPrefix = true;
    noSuffixFlag = false;
  }
  if (noPrefix) {
    this.buffer += word;
  } else {
    this.buffer += ' ' + word;
  }

  if (noSuffix) {
    noSuffixFlag = true;
  }
}
Sql.prototype.travelMain = function(ast) {
  this.travelSelect(ast.value);
  if (ast.hasSemicolon) {
    this.append(';', true);
  }
}
Sql.prototype.travelSelect = function(ast) {
  this.appendKeyword('select', true);
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  if (ast.highPriorityOpt) {
    this.appendKeyword(ast.highPriorityOpt);
  }
  if (ast.maxStateMentTimeOpt) {
    this.append('MAX_STATEMENT_TIME = ' + ast.maxStateMentTimeOpt);
  }
  if (ast.straightJoinOpt) {
    this.appendKeyword(ast.straightJoinOpt);
  }
  if (ast.sqlSmallResultOpt) {
    this.appendKeyword(ast.sqlSmallResultOpt);
  }
  if (ast.sqlBigResultOpt) {
    this.appendKeyword(ast.sqlBigResultOpt);
  }
  if (ast.sqlBufferResultOpt) {
    this.appendKeyword(ast.sqlBufferResultOpt);
  }
  if (ast.sqlCacheOpt) {
    this.appendKeyword(ast.sqlCacheOpt);
  }
  if (ast.sqlCalcFoundRowsOpt) {
    this.appendKeyword(ast.sqlCalcFoundRowsOpt);
  }
  if (ast.selectItems) {
    this.travelSelectExpr(ast.selectItems);
  }
  if (ast.from) {
    this.appendKeyword('from');
    this.travel(ast.from);
  }
  if (ast.partition) {
    this.travel(ast.partition);
  }
  if (ast.where) {
    this.appendKeyword('where');
    this.travel(ast.where);
  }
  if (ast.groupBy) {
    this.travel(ast.groupBy);
  }
  if (ast.having) {
    this.travel(ast.having);
  }
  if (ast.orderBy) {
    this.travel(ast.orderBy);
  }
  if (ast.limit) {
    this.travel(ast.limit);
  }
  if (ast.procedure) {
    this.appendKeyword('procedure');
    this.travel(ast.procedure);
  }
  if (ast.updateLockMode) {
    this.appendKeyword(ast.updateLockMode);
  }
}
Sql.prototype.travelSelectExpr = function (ast) {
  var exprList = ast.value;
  for (var i = 0; i < exprList.length; i++) {
    if (typeof ast === 'string') {
      this.append(exprList[i]);
    } else {
      this.travel(exprList[i]);
      if (exprList[i].alias) {
        if (exprList[i].hasAs) {
          this.appendKeyword('as');
        }
        this.travel(exprList[i].alias);
      }
    }
    if (i !== exprList.length - 1) {
      this.append(',', true);
    }
  }
}
Sql.prototype.travelIsExpression = function (ast) {
  this.travel(ast.left);
  this.appendKeyword('in');
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.append(ast.right);
}
Sql.prototype.travelNotExpression = function (ast) {
  this.appendKeyword('not');
  this.travel(ast.value);
}
Sql.prototype.travelOrExpression =
Sql.prototype.travelAndExpression =
Sql.prototype.travelXORExpression = function (ast) {
  this.travel(ast.left);
  this.appendKeyword(ast.operator);
  this.travel(ast.right);
}
Sql.prototype.travelNull =
Sql.prototype.travelBoolean =
Sql.prototype.travelBooleanExtra = function (ast) {
  this.appendKeyword(ast.value);
}
Sql.prototype.travelNumber = function (ast) {
  this.append(ast.value);
}
Sql.prototype.travelString = function (ast) {
  this.append(ast.value);
}
Sql.prototype.travelFunctionCall = function (ast) {
  this.append(ast.name);
  this.append('(', true, true);
  var params = ast.params;
  for (var i = 0; i < params.length; i++) {
    var param = params[i];
    this.travel(param);
    if (i !== params.length -1) {
      this.append(',', true);
    }
  }
  this.append(')', true);
}
Sql.prototype.travelFunctionCallParam = function (ast) {
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  this.travel(ast.value);
}
Sql.prototype.travelIdentifier = function (ast) {
  this.append(ast.value);
}
Sql.prototype.travelIdentifierList = function (ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length -1) {
      this.append(',', true);
    }
  }
}
Sql.prototype.travelWhenThenList = function (ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.appendKeyword('when');
    this.travel(list[i].when);
    this.appendKeyword('then');
    this.travel(list[i].then);
  }
}
Sql.prototype.travelCaseWhen = function (ast) {
  this.appendKeyword('case');
  if (ast.caseExprOpt) {
    this.travel(ast.caseExprOpt);
  }
  this.travel(ast.whenThenList);
  if (ast.else) {
    this.appendKeyword('else');
    this.travel(ast.else);
  }
  this.appendKeyword('end');
}
Sql.prototype.travelPrefix = function (ast) {
  this.appendKeyword(ast.prefix);
  this.travel(ast.value);
}
Sql.prototype.travelSimpleExprParentheses = function (ast) {
  if (ast.hasRow) {
    this.appendKeyword('row');
  }
  this.append('(', false, true);
  this.travel(ast.value);
  this.append(')', true);
}
Sql.prototype.travelSubQuery = function (ast) {
  if (ast.hasExists) {
    this.appendKeyword('exists');
  }
  this.append('(', false, true);
  this.travel(ast.value);
  this.append(')', true);
}
Sql.prototype.travelIdentifierExpr = function (ast) {
  this.append('{');
  this.travel(ast.identifier);
  this.travel(ast.value);
  this.append('}');
}
Sql.prototype.travelBitExpression = function (ast) {
  this.travel(ast.left);
  this.appendKeyword(ast.operator);
  this.travel(ast.right);
}
Sql.prototype.travelInSubQueryPredicate = function (ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('in');
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
}
Sql.prototype.travelInExpressionListPredicate = function (ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('in');
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
}
Sql.prototype.travelBetweenPredicate = function (ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('between');
  this.travel(ast.right.left);
  this.appendKeyword('and');
  this.travel(ast.right.right);
}
Sql.prototype.travelSoundsLikePredicate = function (ast) {
  this.travel(ast.left);
  this.appendKeyword('sounds');
  this.appendKeyword('like');
  this.travel(ast.right);
}
Sql.prototype.travelLikePredicate = function (ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('like');
  this.travel(ast.right);
  if (ast.escape) {
    this.appendKeyword('escape')
    this.travel(ast.escape);
  }
}
Sql.prototype.travelRegexpPredicate = function (ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('regexp');
  this.travel(ast.right);
}
Sql.prototype.travelRLikePredicate = function (ast) {
    this.travel(ast.left);
    if (ast.hasNot) {
        this.appendKeyword('not');
    }
    this.appendKeyword('rlike');
    this.travel(ast.right);
}
Sql.prototype.travelIsNullBooleanPrimary = function (ast) {
  this.travel(ast.value);
  this.appendKeyword('is');
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('null');
}
Sql.prototype.travelComparisonBooleanPrimary = function (ast) {
  this.travel(ast.left);
  this.append(ast.operator);
  this.travel(ast.right);
}
Sql.prototype.travelComparisonSubQueryBooleanPrimary = function (ast) {
  this.travel(ast.left);
  this.append(ast.operator);
  this.appendKeyword(ast.subQueryOpt);
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
}
Sql.prototype.travelExpressionList = function (ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
}
Sql.prototype.travelGroupBy = function (ast) {
  this.appendKeyword('group by');
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
}
Sql.prototype.travelOrderBy = function (ast) {
  this.appendKeyword('order by');
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  if (ast.rollUp) {
    this.appendKeyword('with rollup');
  }
}
Sql.prototype.travelGroupByOrderByItem = function (ast) {
  this.travel(ast.value);
  if (ast.sortOpt) {
    this.appendKeyword(ast.sortOpt);
  }
}
Sql.prototype.travelLimit = function (ast) {
  this.appendKeyword('limit');
  var list = ast.value;
  if (list.length === 1) {
    this.append(list[0]);
  } else if (list.length === 2) {
    if (ast.offsetMode) {
      this.append(list[1]);
      this.append('offset');
      this.append(list[0]);
    } else {
      this.append(list[0]);
      this.append(',', true);
      this.append(list[1]);
    }
  }
}
Sql.prototype.travelTableRefrences = function (ast) {
  var list = ast.value;
  if (ast.TableRefrences) {
    this.append('(', false, true);
  }
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  if (ast.TableRefrences) {
    this.append(')');
  }
}
Sql.prototype.travelTableRefrence = function (ast) {
  if (ast.hasOj) {
    this.append('{');
    this.appendKeyword('oj');
    this.travel(ast.value);
    this.append('}');
  } else {
    this.travel(ast.value);
  }
}
Sql.prototype.travelInnerCrossJoinTable = function (ast) {
  this.travel(ast.left);
  if (ast.innerCrossOpt) {
    this.appendKeyword(ast.innerCrossOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
  if (ast.condition) {
    this.travel(ast.condition);
  }
}
Sql.prototype.travelStraightJoinTable = function (ast) {
  this.travel(ast.left);
  this.appendKeyword('straight_join');
  this.travel(ast.right);
  this.travel(ast.condition);
}
Sql.prototype.travelLeftRightJoinTable = function (ast) {
  this.travel(ast.left);
  this.appendKeyword(ast.leftRight);
  if (ast.outOpt) {
    this.appendKeyword(ast.outOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
  this.travel(ast.condition);
}
Sql.prototype.travelNaturalJoinTable = function (ast) {
  this.travel(ast.left);
  this.appendKeyword('natural');
  if (ast.leftRight) {
    this.appendKeyword(ast.leftRight);
  }
  if (ast.outOpt) {
    this.appendKeyword(ast.outOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
}
Sql.prototype.travelOnJoinCondition = function (ast) {
  this.appendKeyword('on');
  this.travel(ast.value);
}
Sql.prototype.travelUsingJoinCondition = function (ast) {
  this.appendKeyword('using');
  this.appendKeyword('(', false, true);
  this.travel(ast.value);
  this.appendKeyword(')');
}
Sql.prototype.travelPartitions = function (ast) {
  this.appendKeyword('partition');
  this.appendKeyword('(', false, true);
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  this.appendKeyword(')');
}
Sql.prototype.travelForOptIndexHint = function (ast) {
  this.appendKeyword('for');
  this.appendKeyword(ast.value);
}
Sql.prototype.travelIndexList = function (ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
}
Sql.prototype.travelUseIndexHint = function (ast) {
  this.appendKeyword('use');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
}
Sql.prototype.travelIgnoreIndexHint = function (ast) {
  this.appendKeyword('ignore');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
}
Sql.prototype.travelForceIndexHint = function (ast) {
  this.appendKeyword('force');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
}
Sql.prototype.travelTableFactor = function (ast) {
  this.travel(ast.value);
  if (ast.partition) {
    this.travel(ast.partition);
  }
  if (ast.alias) {
    if (ast.hasAs) {
      this.appendKeyword('as');
    }
    this.travel(ast.alias);
  }
  if (ast.indexHintOpt) {
    this.travel(ast.indexHintOpt);
  }
}

Sql.prototype.travelDelimitedIdentifier = function (ast) {
    this.append(ast.value);
}

Sql.prototype.travelCastFunction = function (ast) {
    this.appendKeyword('cast');
    this.append('(', true, true);
    if (ast.castIdentifier) {
        this.travel(ast.castIdentifier);
    }
    this.appendKeyword('as');
    if (ast.castType) {
        this.append(ast.castType);
    }
    this.append(')', true);
}

Sql.prototype.travelRightFunction = function (ast) {
    this.appendKeyword('right');
    this.append('(', true, true);
    this.travel(ast.characterExpression);
    this.append(',', true);
    this.append(ast.integerExpression);
    this.append(')', true);
}

Sql.prototype.travelLeftFunction = function (ast) {
    this.appendKeyword('left');
    this.append('(', true, true);
    this.travel(ast.characterExpression);
    this.append(',', true);
    this.append(ast.integerExpression);
    this.append(')', true);
}

Sql.prototype.travelNextValueFor = function (ast) {
    this.appendKeyword('next value for');
    this.travel(ast.value);
}

Sql.prototype.travelPartitionBy = function (ast) {
    this.appendKeyword('partition by');
    this.travel(ast.value);
}

Sql.prototype.travelOverClause = function (ast) {
    this.travel(ast.left);
    this.appendKeyword('over');
    this.append('(', true, true);
    this.travel(ast.partitionBy);
    this.travel(ast.orderBy);
    this.append(')', true);
}
var root = this
// AMD / RequireJS
if (typeof define !== 'undefined' && define.amd) {
    define([], function () {
        return tsqlParser;
    });
}
// Node.js
else if (typeof module !== 'undefined' && module.exports) {
    module.exports = tsqlParser;
}
// included directly via <script> tag
else {
    root.tsqlParser = tsqlParser;
}

